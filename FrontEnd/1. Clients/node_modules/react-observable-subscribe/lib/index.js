'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _symbolObservable = require('symbol-observable');

var _symbolObservable2 = _interopRequireDefault(_symbolObservable);

var _exenv = require('exenv');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ERROR_NOT_AN_OBSERVABLE = '<Subscribe> only accepts a single child, an Observable that conforms to observable[Symbol.observable]()';

function childrenToObservable(children) {
  if (typeof children === 'array') {
    if (children.length > 1) {
      throw new TypeError(ERROR_NOT_AN_OBSERVABLE);
    }

    children = children[0];
  }

  if (_symbolObservable2.default in children === false) {
    throw new TypeError(ERROR_NOT_AN_OBSERVABLE);
  }

  return children[_symbolObservable2.default]();
}

var Subscribe = function (_Component) {
  _inherits(Subscribe, _Component);

  function Subscribe() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Subscribe);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Subscribe.__proto__ || Object.getPrototypeOf(Subscribe)).call.apply(_ref, [this].concat(args))), _this), _this.subscription = null, _this.state = {
      element: null
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Subscribe, [{
    key: 'setupSubscription',
    value: function setupSubscription() {
      var _this2 = this;

      var children = this.props.children;

      if (children !== undefined && children !== null) {
        // Observables may be scheduled async or sync, so this subscribe callback
        // might immediately run or it it might not.
        this.subscription = childrenToObservable(children).subscribe(function (element) {
          if (Array.isArray(element)) {
            throw new TypeError('<Subscribe> streams cannot return arrays because of React limitations');
          }

          _this2.setState({ element: element });
        });
      }
    }
  }, {
    key: 'teardownSubscription',
    value: function teardownSubscription() {
      if (this.subscription) {
        this.subscription.unsubscribe();
      }
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.setupSubscription();

      // When server-side rendering only this lifecycle hook is used so
      // componentWillUnmount() is NEVER run to dispose of subscription. It's also
      // pointless to wait for any async values since they won't be rendered.
      if (!_exenv.canUseDOM && !_exenv.canUseWorkers) {
        this.teardownSubscription();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.children !== this.props.children) {
        this.teardownSubscription();
        this.setupSubscription();
      }
    }
  }, {
    key: 'componentWillUmount',
    value: function componentWillUmount() {
      this.teardownSubscription();
    }
  }, {
    key: 'render',
    value: function render() {
      var element = this.state.element;

      return (0, _react.isValidElement)(element) ? element : _react2.default.createElement(
        'span',
        null,
        element
      );
    }
  }]);

  return Subscribe;
}(_react.Component);

exports.default = Subscribe;